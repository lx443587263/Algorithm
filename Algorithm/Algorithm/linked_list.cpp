#include <stdlib.h>
#include <iostream>
/* The codes below are generated by 'Element Studio'. */
typedef struct _Node
{
	char value;
	struct _Node * next;
} Node, *PNode;
PNode header = NULL;
PNode create_node(char value)
{
	PNode node = (PNode)(malloc(sizeof(Node)));
	node->value = value;
	node->next = NULL;
	return node;
}
void push(PNode node)
{
	PNode cur_node = header;
	if (!header)
	{
		header = node;
		return;
	}
	while (cur_node->next)
	{
		cur_node = cur_node->next;
	}
	cur_node->next = node;
}
void remove(char value)
{
	PNode pre_node = NULL;
	PNode cur_node = header;
	while (cur_node)
	{
		if (cur_node->value == value)
		{
			break;
		}
		pre_node = cur_node;
		cur_node = cur_node->next;
	}
	if (!cur_node)
	{
		return;
	}
	if (!pre_node)
	{
		header = cur_node->next;
		free(cur_node);
	}
	else
	{
		pre_node->next = cur_node->next;
		free(cur_node);
	}
}
PNode find(char value)
{
	PNode cur_node = header;
	while (cur_node)
	{
		if (cur_node->value == value)
		{
			return cur_node;
		}
		cur_node = cur_node->next;
	}
	return NULL;
}
void insert(char value, PNode node)
{
	PNode cur_node = header;
	PNode pre_node = NULL;
	while (cur_node)
	{
		if (cur_node->value == value)
		{
			break;
		}
		pre_node = cur_node;
		cur_node = cur_node->next;
	}
	if (!cur_node)
	{
		return;
	}
	if (!pre_node)
	{
		header = node;
		node->next = cur_node;
	}
	else
	{
		pre_node->next = node;
		node->next = cur_node;
	}
}
void traversal(void)
{
	PNode node = header;
	while (node)
	{
		std::cout << node->value << std::endl;
		node = node->next;
	}
}
int main(int ac, char * av[])
{
	return 0;
}
